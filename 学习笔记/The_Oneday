一、学习前言（我英文很差所以写的就是中文的文档）
    1/python 能够应用的场景
        用于捕获、分析和处理数据的业务应用。
        Web 浏览器可以访问的动态 Web 应用。
        2D 和 3D 游戏。
        金融和科研应用。
        基于云的应用。
        移动应用。


    2/Python 的工作原理是什么？
        1.python具有编译器， 但是，该编译器不会将源代码直接转换为计算机可以理解的格式， 而是以特殊格式生成 Python 解释器可以解释和运行的代码。
        2._解释器_是运行每个指令的程序。 它跟踪 RAM 中值的存储位置。 解释器还知道如何与文件系统或网络等外部资源进行交互。
        3.此外，每次运行程序时，都会重新编译其 Python 源代码。
        4.首先，Python 解释器可用于许多计算机平台。 例如，如果在 Linux 上编写了 Python 代码，该代码也将在 macOS 和 Windows 上运行。 无需为特定计算平台编译源代码就可以运行程序。
        5.其次，可以一次编写并执行一行 Python 代码。 在学习过程中，你可能想要试验一个新点子，但不想创建新的项目或文件。 你只需在交互模式下运行 Python，并开始在终端或命令行中输入 Python 代码。 当你退出 Python 的交互模式时，此代码会丢失。 但对于快速试验，它非常适用。
        6.最后，可以使用称为_调试程序_的特殊软件工具执行以下操作：
            在程序运行时对其进行编辑。
            暂停程序执行。
            单步调试每行 Python 代码，以观察其运行情况。
            观察代码对存储在 RAM 中的值所做的更改。

    3/python 的编程过程
        1.分析需求：第一步是了解你要解决的问题。 如何开始这一步取决于你生成这个程序是为了满足老师、客户还是你自己的需求。 你通常需要深入了解该问题。 针对该问题提出一些关键问题，阅读所有可用的讯息或笔记，并采取其他措施。
        2.设计解决方案：接下来，开始考虑诸如程序的外观、功能以及当出现意外问题时会发生什么之类的问题。 你可能要绘制图表、做笔记或构思程序设计。 你可能还要开始想象在代码中遇到某些挑战时将采用的方法。
        3.编写代码：将大部分时间花在编写代码上，以实现你创建的设计。
        4.测试代码：编写代码时进行测试，看代码能否正常工作。 以后，你可能会添加更正式的测试，甚至需要用户参与其中。
        5.部署代码：将代码分发给其他人，以便他们可以开始使用它来解决问题。 或者在课堂上，你可能会将代码发送给讲师，这也是一种部署形式。
        6.维护代码：随着时间推移，你的程序用户可能会要求提供新功能或报告程序中的 bug。 解决这些问题，并将代码重新分发给用户。


二、创建第一个python 程序
    学习目标
        本模块介绍了以下内容：

        创建 Python 代码文件并在 Visual Studio Code 中执行该代码。
        编写代码以向命令行发送文本消息。
        编写代码以接受命令行中的用户输入。
        了解发生编译和运行时错误的原因，以及接下来要执行的操作。
        将硬编码文本与用户输入连接，以便向用户显示自定义格式的消息。
        对数值数据执行加法数学运算。
        在字母数字数据和数值数据之间来回转换（并了解为什么需要这样做）。

    
    当你说想要“学习 Python”时，你实际上想要：

        了解多个或所有关键字和运算符的作用。
        学习如何编写正确使用关键字和运算符的代码（即语法）。
        熟悉 Python 标准库中一些最重要的函数和模块，并学习如何使用第三方库中的函数和模块。
        学习如何构造代码以生成越来越有趣和越来越复杂的程序。


