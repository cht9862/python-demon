一、 函数简介（function）
    函数也是一个对象
        在python 中一切皆对象
        对象是内存中专门用来存储数据的一块区域
        函数可以用来保存一些可执行的代码
        创建函数：
            def 函数名([形参1，形参2，....形参n])：
                代码块
            
        函数中保存的代码不会立即执行
        调用函数:
            函数名称加上一个()

        示例：
            def name(a,b,c):
                print(a)
                return True


    
    函数的参数：
        形参
            在创建函数的时候加入形参，形参包含位置形参和关键字形参也就是设定默认值的参数，注意顺序，关键字形参卸载位置形参后面以逗号分隔
            添加形参的时候可以在形参后加入说明：比如 def sumb(a:int,b:str='hello') 注意这里int 只是说明效果没有约束参数的功能,在描述后面可以正常添加参数默认值  
            def sumb(a1,a2,argument=3):                  # 形参可以定义默认值，当调用是不传入参数，会使用默认值
                # Number_a=int(input('请输入第一个数字'))
                Number_b=int(input('请输入第二个数字'))
                print(argument+Number_b)

        实参
            在调用函数的时候传入实参
            位置传参和关键字传参与形参对应
            实参可以传入各种类型的数据，列表，元组，字符串......
            def sumb(a1,a2,argument=3):                  
                # Number_a=int(input('请输入第一个数字'))
                Number_b=int(input('请输入第二个数字'))
                print(argument+Number_b)

            sumb(a2=1,a2=3)      # 通过关键字传入实参时候可以不按形参的位置进行传参，默认值形参可以不输入



        不定长参数

            装包：
            
            '*参数'   
                在创建参数的时候，让一个形参接受多个实参  
                具体操作位在形参前面加上* ，那么这个参数就可以传入多个实参
                也可以不传参,写入顺序一般将可变参数写在最后面，如果写在前面，那么后面的参数传入实参时就必须以关键字传参的形式，a1=10这种方式
                *参数只能以位置传参方式，其他不带*的在*参数之前位置和关键字捷克，在*参之后就需要关键字传参的形式
                注意'*参数' 是以元组形式存放，又称装包
                
            '**参数'
                在传参的时候必须以关键字形式传参不能位置传参 a1=10 这种方式
                '**参数' 是以字典形式存放
                一般应用在一个形参，需要多个关键字传参，就会使用到**参数

            解包：
                t=('a',1,42)
                上述描述了参数的装包，简意为将参数装在元组或是字典中，那么解包就是把序列中的数据取出传入到函数当中   调用函数解包方法name(*t)
                
                t={'a':12,'b':123}
                如果要对字典解包就要用name(**t)
            
            
            示例：
                def name(*a,**b):       #创建函数的时候，定义两个不定长形参
                name(1,d=11,c=10)       #调用函数传入实参，结果为a= (1,)，b= {'d': 11, 'c': 10}